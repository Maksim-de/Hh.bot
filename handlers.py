from aiogram import Bot, Router, types, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton,ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from states import *
from api_handler import *
from aiogram.utils.markdown import hbold, hitalic, hunderline, text, code
# from config import TOKEN_WEATHER
from datetime import datetime
import io
import asyncio
import json
import html
import re
from aiogram.utils.markdown import html_decoration as hd
from bs4 import BeautifulSoup
import re
from markdown import markdown
from config import *

vacanciessss = {}
hr_vacanciess = {}

category_keywords = {
 "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞": {
    "keywords": [
      "–∞–Ω–∞–ª–∏—Ç–∏–∫", 'systems_analyst', 'data_analyst', 'business_analyst', 'bi-–∞–Ω–∞–ª–∏—Ç–∏–∫', '–±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫', 'marketing_analyst', 
      'bi_developer', 'bi-–∞–Ω–∞–ª–∏—Ç–∏–∫, –∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö'
    ],
    "subcategories": {
      "–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫": [
        "—Å–∏—Å—Ç–µ–º–Ω", "systems_analyst",  "uml"
      ],
      "–ë–∏–∑–Ω–µ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫": [
        "–±–∏–∑–Ω–µ—Å", "business", '–±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫'
      ],
      "Data –∞–Ω–∞–ª–∏—Ç–∏–∫ –∏ BI": [
        'data_analyst', 'bi-–∞–Ω–∞–ª–∏—Ç–∏–∫', "bi_developer", 'bi-–∞–Ω–∞–ª–∏—Ç–∏–∫, –∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö'
      ],
      "–ü—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫": [
        "–ø—Ä–æ–¥—É–∫—Ç–æ–≤", "product", "a/b", "ab test", "a/b test", '–ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫'
      ],
      "–ê–Ω–∞–ª–∏—Ç–∏–∫ DWH": [
        "data engineer", "dwh", "data warehouse", "airflow", "data lake",
        "databricks", "spark", "hadoop", 'sql'
      ],
      "–í–µ–±-–∞–Ω–∞–ª–∏—Ç–∏–∫": [
        "–≤–µ–±", "web",
      ],
      "–ê–Ω–∞–ª–∏—Ç–∏–∫ (–î—Ä—É–≥–æ–µ)": []
  }
},
 "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ": {
    "keywords": [
      "—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫", "tester", "qa", "quality assurance", "—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫-–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä",
      "qa engineer", "–∏–Ω–∂–µ–Ω–µ—Ä –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω", "—Ä—É—á–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω", "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω",
      "–º–æ–±–∏–ª—å–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω", "–≤–µ–± —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω", "–≥–µ–π–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω", "api —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω",
      "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω", "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω", "–Ω–∞–≥—Ä—É–∑–æ—á–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω",
      "–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω", "—Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω", "smoke —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω", "–ø—Ä–∏–µ–º–æ—á–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω",
      "quality manager", "qa lead", "qa architect", 'manual_testing', 'test_automation', 'qa_engineer'
    ],
    "subcategories": {
      "–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ": [
        "—Ä—É—á–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫", '—Ä—É—á–Ω–æ–µ', '—Ä—É—á–Ω–æ–≥–æ', 'manual_testing'
      ],
      "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ": [
        "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω", "automation tester", "qa automation", "test_automation"
      ],
     "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–î—Ä—É–≥–æ–µ)": []
    }
},
 "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞": {
    "keywords": [
      "frontend", "front-end", "front end", "javascript", "js",
      "react", "angular", "vue", "typescript", 'software',
      "backend", 'devops', 'mobileapp_developer', "data_engineer", 'database_developer', 
      "fullstack", "full-stack", "full stack", "DevOps-–∏–Ω–∂–µ–Ω–µ—Ä"
    ],
    "subcategories": {
      "Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞": [
        "frontend", "front-end", "front end", "javascript", "js",
        "react", "angular", "vue", "typescript", "ui developer"
      ],
      "Backend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞": [
        "backend", "back-end", "back end", "server", "api",
        "python", "java", "php", "node", "nodejs", "net", "ruby", "go", "golang"
      ],
      "Fullstack —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞": [
        "fullstack", "full-stack", "full stack", 
      ],
      "–ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞": [
        "mobile", "android", "ios", "flutter", "react",
        "–∫–æ—Ç–ª–∏–Ω", "kotlin", "swift", "mobileapp_developer"
      ],
      "DevOps": [
        "devops", "DevOps-–∏–Ω–∂–µ–Ω–µ—Ä"
      ], 
      "Data engineer": [
        "data_engineer", 'database_developer'
      ],
  "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (–î—Ä—É–≥–æ–µ)": []
    }
},
 "ML/AI/DS": {
    "keywords": [ 
      "ml engineer", "ml-engineer", "mlops", 'data_scientist', 'ml', 'ai', '–ø—Ä–æ–º—Ç', '–¥–∞—Ç–∞-—Å–∞–π–µ–Ω—Ç–∏—Å—Ç'
    ],
    "subcategories": {
      "Data Science": [
        "data science", "–∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω", "–¥–∞—Ç–∞-—Å–∞–π–µ–Ω—Ç–∏—Å—Ç", "data_scientist", '–¥–∞—Ç–∞-—Å–∞–π–µ–Ω—Ç–∏—Å—Ç'
      ],
      "ML Engineering & Mlops": [
        "ml engineer", "ml-engineer", "mlops", "model serving"
      ],
       "AI (–î—Ä—É–≥–æ–µ)": []
    }
},
 "–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç": {
    "keywords": [
      '–º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞', '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≥—Ä—É–ø–ø—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏', '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏', "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–æ–≤", 'project_manager',
      'project_director', 'product_manager', 'marketing_manager', 'account_manager'
    ],

    "subcategories": {
      "–ü—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç": [
        "–ø—Ä–æ–¥—É–∫—Ç–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä", "product manager", "PM", "product owner",
        "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–æ–¥—É–∫—Ç", "head of product", 'product_manager'
      ],
      "–ü—Ä–æ–µ–∫—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç": [
        "–ø—Ä–æ–µ–∫—Ç–Ω –º–µ–Ω–µ–¥–∂–µ—Ä", "project manager", "PM", "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–æ–≤", 'project_manager', 'scrum_master', 'account_manager'
      ],
      "–ò–¢ —Ç–æ–ø –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç": [
        '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≥—Ä—É–ø–ø—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',  '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏', '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä (—Å—Ç–æ)',  'project_director'
      ],

"–ú–µ–Ω–µ–¥–∂–µ—Ä (–î—Ä—É–≥–æ–µ)": []
 }
    }
}



from aiogram import F
from aiogram.types import Message, FSInputFile
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()

users = {}

selected_subcategories = {}

selected_cities = {}

user_expierence = {}

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message
from aiogram.filters import Command
from aiogram import html as h
from aiogram.utils.keyboard import ReplyKeyboardBuilder

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_keyboard = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π")],
    [KeyboardButton(text="AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç")],
    [KeyboardButton(text="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é"), KeyboardButton(text="–ü–æ–º–æ—â—å")]
], resize_keyboard=True)

# –ú–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤–∞–∫–∞–Ω—Å–∏–π
categories_keyboard = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"), KeyboardButton(text="–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞")],
    [KeyboardButton(text="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"), KeyboardButton(text="ML/AI/DS")],
    [KeyboardButton(text="–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç")],
    [KeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), KeyboardButton(text="–ì–æ—Ç–æ–≤–æ")]
], resize_keyboard=True)

expierence_keyboard = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="–ù–µ—Ç –æ–ø—ã—Ç–∞"), KeyboardButton(text="–û—Ç 1 –≥–æ–¥–∞ –¥–æ 3 –ª–µ—Ç")],
    [KeyboardButton(text="–û—Ç 3 –¥–æ 6 –ª–µ—Ç"), KeyboardButton(text="–ë–æ–ª–µ–µ 6 –ª–µ—Ç")],
    [KeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"),KeyboardButton(text="–ì–æ—Ç–æ–≤–æ")]
    
], resize_keyboard=True)





# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    # user_id = message.from_user.id
    user_id = str(message.from_user.id)
    await state.set_state(Form.user_id)
    await state.update_data(user_id=user_id) 
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} {message.from_user.username} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É start")
    await check_and_add_user(user_id, message.from_user.first_name)


    
    

    welcome_text = (
    "üëã <b>–ü—Ä–∏–≤–µ—Ç, {name}!</b>\n\n"
    "–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π HR-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É –º–µ—á—Ç—ã!\n\n"
    "üìå <b>–ß—Ç–æ —è —É–º–µ—é:</b>\n\n"
    "üîç –ò—Å–∫–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ —Ç–≤–æ–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º\n"
    "üìù –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ—ë —Ä–µ–∑—é–º–µ –∏ –¥–∞–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
    "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –º–Ω–æ–π –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ üëá\n\n"
    "<i>–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –º–µ–Ω—è –∫–æ–º–∞–Ω–¥–æ–π /start</i>\n\n"
    "–í–∞—à feedback –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ! –û—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É <b>–ü–æ–º–æ—â—å</b>."
        ).format(name=message.from_user.first_name)


    await message.answer(welcome_text,  parse_mode="HTML", reply_markup=main_keyboard)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id} {message.from_user.username} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω welcome_text")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π"
@router.message(lambda message: message.text == "–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π")
async def search_vacancies(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} {message.from_user.username} –Ω–∞—á–∞–ª –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π")
    await state.set_state(Form.category)
    await message.answer(
        "üîç –î–∞–≤–∞–π –ø–æ–¥–±–µ—Ä–µ–º –¥–ª—è —Ç–µ–±—è –ª—É—á—à–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏!\n"
        "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=categories_keyboard
        )


@router.message(Form.category, lambda message: message.text in category_keywords.keys())
async def handle_category(message: Message, state: FSMContext):
    category = message.text
    user_id = str(message.from_user.id)
    
    await state.update_data(current_category=category)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π –Ω–∞–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç
    if user_id not in selected_subcategories:
        selected_subcategories[user_id] = set()
    

    await message.answer(
        f"üìå –¢—ã –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é: <b>{category}</b>\n\n"
        "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
        reply_markup=get_subcategories_keyboard(category, user_id),
        parse_mode="HTML"
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
def get_subcategories_keyboard(category: str, user_id: str) -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    subcategories = category_keywords[category]["subcategories"].keys()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π (–ø–æ 2 –≤ —Ä—è–¥)
    for subcategory in subcategories:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        is_selected = user_id in selected_subcategories and subcategory in selected_subcategories[user_id]
        text_button = f"‚úÖ {subcategory}" if is_selected else subcategory
        builder.add(KeyboardButton(text=text_button))
    
    builder.adjust(2)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    builder.row(
        KeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"),
        KeyboardButton(text="–ì–æ—Ç–æ–≤–æ")
    )
    
    return builder.as_markup(resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
@router.message(
    Form.category,
    lambda message: any(
        message.text.replace("‚úÖ ", "") in subcats 
        for cat in category_keywords.values() 
        for subcats in cat["subcategories"].keys()
    )
)
async def handle_subcategory(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    subcategory = message.text.replace("‚úÖ ", "") 
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç
    if user_id not in selected_subcategories:
        selected_subcategories[user_id] = set()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
    if subcategory in selected_subcategories[user_id]:
        selected_subcategories[user_id].remove(subcategory)
        action = "‚ùå –£–±—Ä–∞–Ω–æ –∏–∑ –≤—ã–±–æ—Ä–∞"
    else:
        selected_subcategories[user_id].add(subcategory)
        action = "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∫ –≤—ã–±–æ—Ä—É"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    data = await state.get_data()
    current_category = data.get('current_category')
    
    selected = "\n".join(selected_subcategories.get(user_id, ["–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ"]))

    
    await message.answer(
        f"{action}: <b>{subcategory}</b>\n\n"
        f"<b>–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä:</b>\n\n{selected}\n\n"
        "–ú–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–±–∏—Ä–∞—Ç—å –∏–ª–∏ –Ω–∞–∂–∞—Ç—å <b>¬´–ì–æ—Ç–æ–≤–æ¬ª</b>",
        reply_markup=get_subcategories_keyboard(current_category, user_id),
        parse_mode="HTML"
    )


@router.message(Form.category, lambda message: message.text == "–ì–æ—Ç–æ–≤–æ")
async def handle_subcategories_done(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} {message.from_user.username} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –≥–æ—Ç–æ–≤–æ")
    
    if user_id not in selected_subcategories or not selected_subcategories[user_id]:
        await message.answer("‚ö†Ô∏è –¢—ã –Ω–µ –≤—ã–±—Ä–∞–ª –Ω–∏ –æ–¥–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç.")
        return
    
    selected = "\n".join(selected_subcategories[user_id])
   
    await message.answer(
        "üìã <b>–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π –≤—ã–±–æ—Ä:</b>\n\n"
        f"{selected}\n\n"
        "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:",
        reply_markup=expierence_keyboard,
        parse_mode="HTML"
    )

    await state.set_state(Form.waiting_for_experience)
    
    data = await state.get_data()
    if 'selected_cities' in data:
        selected_cities[user_id] = data['selected_cities']



@router.message(Form.waiting_for_experience)
async def handle_experience_selection(message: Message, state: FSMContext):
    global user_expierence
    user_id = str(message.from_user.id)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –∏–ª–∏ –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
    if user_id not in user_expierence or isinstance(user_expierence[user_id], str):
        user_expierence[user_id] = set()
    
    if message.text == "–ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏":
        await state.set_state(Form.category)
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π", reply_markup=categories_keyboard)
        return
    
    if message.text == "–ì–æ—Ç–æ–≤–æ":
        if not user_expierence.get(user_id):
            await message.answer("‚ö†Ô∏è –¢—ã –Ω–µ –≤—ã–±—Ä–∞–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ–ø—ã—Ç–∞.\n\n"
                               "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏¬ª.")
            return
            
        selected = "\n".join(user_expierence[user_id])
        await message.answer(
            "üìã <b>–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π –≤—ã–±–æ—Ä –æ–ø—ã—Ç–∞:</b>\n\n"
            f"{selected}\n\n"
            "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            reply_markup=get_cities_keyboard(all_cities, user_id),
            parse_mode="HTML"
        )
        await state.set_state(Form.waiting_for_cities)
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º –æ–ø—ã—Ç
    exp = message.text
    if exp in user_expierence[user_id]:
        user_expierence[user_id].remove(exp)
        action = "‚ùå –£–±—Ä–∞–Ω–æ –∏–∑ –≤—ã–±–æ—Ä–∞"
    else:
        user_expierence[user_id].add(exp)
        action = "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∫ –≤—ã–±–æ—Ä—É"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    selected = "\n".join(user_expierence.get(user_id, ["–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ"]))
    
    await message.answer(
        f"{action}: <b>{exp}</b>\n\n"
        f"<b>–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä:</b>\n\n{selected}\n\n"
        "–ú–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–±–∏—Ä–∞—Ç—å –∏–ª–∏ –Ω–∞–∂–∞—Ç—å <b>¬´–ì–æ—Ç–æ–≤–æ¬ª</b>",
        reply_markup=expierence_keyboard,
        parse_mode="HTML"
    )

# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
async def back_to_categories_common(message: Message, state: FSMContext):
    # –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    await state.set_state(Form.category)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=categories_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
@router.message(Form.waiting_for_experience, lambda message: message.text == "–ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def back_to_categories_from_experience(message: Message, state: FSMContext):
    await back_to_categories_common(message, state)

# @router.message(Form.waiting_for_cities, lambda message: message.text == "–ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
# async def back_to_categories_from_cities(message: Message, state: FSMContext):
#     await back_to_categories_common(message, state)

@router.message(Form.waiting_for_cities, lambda message: message.text == "–ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def back_to_categories_from_cities(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
    await state.update_data(selected_cities=selected_cities.get(user_id, set()))
    await back_to_categories_common(message, state)

@router.message(Form.category, lambda message: message.text == "–ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def back_to_categories_from_category(message: Message, state: FSMContext):
    await back_to_categories_common(message, state)
    
def get_cities_keyboard(all_cities,user_id: int = None) -> ReplyKeyboardMarkup:
    # builder = ReplyKeyboardBuilder()
    # builder.row(KeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"))
    # builder.row(KeyboardButton(text="–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π"))
    # builder.adjust(1)
    
    builder = ReplyKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    builder.row(KeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"))
    builder.row(KeyboardButton(text="–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–µ–Ω–∫–∞" –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
    remote_text = "‚úÖ –£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞" if (user_id and str(user_id) in selected_cities and "–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞" in selected_cities[str(user_id)]) else "–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞"

    builder.row(KeyboardButton(text=remote_text))
    
    # –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –†–æ—Å—Å–∏–∏ (–ø—Ä–∏–º–µ—Ä)
    all_cities_now = all_cities
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –Ω–∞—á–∞–ª–µ)
    priority_cities = ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', 
                       "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", '–ß–µ–ª—è–±–∏–Ω—Å–∫', '–£—Ñ–∞',
                       "–°–∞–º–∞—Ä–∞", "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É", '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä', "–û–º—Å–∫", '–í–æ—Ä–æ–Ω–µ–∂', '–ü–µ—Ä–º—å', '–í–æ–ª–≥–æ–≥—Ä–∞–¥']
    

    sorted_cities = priority_cities # + sorted(

    for city in sorted_cities:
        if user_id and str(user_id) in selected_cities and city in selected_cities[str(user_id)]:
            text_button = f"‚úÖ {city}"
        else:
            text_button = city
        builder.add(KeyboardButton(text=text_button))
    
    builder.adjust(2)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

    return builder.as_markup(resize_keyboard=True)



@router.message(Form.waiting_for_cities, F.text, lambda message: message.text.replace("‚úÖ ", "") in all_cities or message.text.replace("‚úÖ ", "") == "–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞")
async def handle_city_selection(message: Message):
    user_id = str(message.from_user.id)
    city = message.text.replace("‚úÖ ", "")  # –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏ –µ—Å–ª–∏ –µ—Å—Ç—å

   
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if user_id not in selected_cities:
        selected_cities[user_id] = set()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º –≥–æ—Ä–æ–¥
    if city in selected_cities[user_id]:
        selected_cities[user_id].remove(city)
        action = "‚ùå –£–±—Ä–∞–Ω–æ –∏–∑ –≤—ã–±–æ—Ä–∞"
    else:
        selected_cities[user_id].add(city)
        action = "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∫ –≤—ã–±–æ—Ä—É"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
    selected = "\n".join(selected_cities.get(user_id, ["–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ"]))

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} {message.from_user.username} –≤—ã–±—Ä–∞–ª {selected}")
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer(
        f"{action}: {city}\n\n"
        f"–¢–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä:\n{selected}\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫¬ª",
        reply_markup=get_cities_keyboard(all_cities, user_id)
    )


@router.message(F.text == "–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π")
async def handle_vacancy_search(message: Message, state: FSMContext, bot: Bot):
    user_id = str(message.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≥–æ—Ä–æ–¥–∞
    if not selected_cities.get(user_id):
        await message.answer(
            "‚ö†Ô∏è <b>–û–π!</b>\n"
            "–¢—ã –Ω–µ –≤—ã–±—Ä–∞–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≥–æ—Ä–æ–¥ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ —É–¥–∞–ª–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É.\n",
            parse_mode="HTML", 
            reply_markup=get_cities_keyboard(all_cities, user_id)
        )
        return
    
    try:

        category = selected_subcategories[user_id]

        category_text =  "\n".join(f"‚Ä¢ {category}" for category in selected_subcategories[user_id])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –≥–æ—Ä–æ–¥–∞–º–∏
        cities_text = "\n".join(f"‚Ä¢ {city}" for city in selected_cities[user_id])


        await message.answer(
            "üîç <b>–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π...</b>\n\n"
            f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b>\n{category_text}\n\n"
            # f"<b>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:</b>\n{user_exp}\n\n"
            f"<b>–ì–æ—Ä–æ–¥–∞:</b>\n{cities_text}\n\n"
            "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞–π–¥—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ - —Å—Ä–∞–∑—É –ø—Ä–∏—à–ª—é –∏—Ö —Ç–µ–±–µ!\n\n"
            "‚è≥ <i>–í–Ω–∏–º–∞–Ω–∏–µ:</i> —è –Ω–µ —É–º–µ—é —Ä–∞—Å—Å—ã–ª–∞—Ç—å —á–∞—â–µ, —á–µ–º —Ä–∞–∑ –≤ 10 –º–∏–Ω—É—Ç",
            parse_mode="HTML", 
            reply_markup=main_keyboard
        )
        
        await send_personalized_vacancies(bot)  
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} {message.from_user.username} –æ–∫–æ–Ω—á–∏–ª –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π")

    except:
         await message.answer(
            "üòï <b>–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫</b>\n"
            "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –º–µ–Ω—é."
            "–û—à–∏–±–∫–∞ –±–ª–∏–Ω –±–ª–∏–Ω—Å–∫–∏–π\n",
            "–ï—Å–ª–∏ –º–µ–Ω—é –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å /start",
            parse_mode="HTML", reply_markup=main_keyboard
        )
         logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} {message.from_user.username} —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
        
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@router.message(lambda message: message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main(message: Message):
    user_id = message.from_user.id
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_keyboard)

@router.message(lambda message: message.text == "AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç")
async def update_resume(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} {message.from_user.username} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç")
    markup = ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[
            [KeyboardButton(text="üî• –ü—Ä–æ–∂–∞—Ä–∫–∞ —Ä–µ–∑—é–º–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞–∫–∞–Ω—Å–∏–π")],
            [KeyboardButton(text="üéØ –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–µ–∑—é–º–µ")],
            [KeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ]
    )

    await message.answer(
    text=(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n\n"
        "–Ø ‚Äî —Ç–≤–æ–π AI –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∫–∞—Ä—å–µ—Ä–µ.\n\n"
        "‚ú® –Ø —Å—Ç–∞—Ä–∞—é—Å—å –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–º –∏ –æ–ø–∏—Ä–∞—é—Å—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏, "
        "–Ω–æ –∏–Ω–æ–≥–¥–∞ –º–æ–≥—É –æ—à–∏–±–∞—Ç—å—Å—è ‚Äî –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–∫–∞–∂–µ—Ç—Å—è —Å—Ç—Ä–∞–Ω–Ω—ã–º, "
        "—Å–æ–æ–±—â–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ –∫–Ω–æ–ø–∫–µ '–ü–æ–º–æ—â—å'!\n\n"
        "–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º?"
    ),
    reply_markup=markup,
    parse_mode="HTML"
)



def escape_html(text):
    return markdown(text, extensions=['fenced_code'])


def clean_and_format(text: str) -> str:

    text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', text)  

    return text




@router.message(lambda message: message.text == "üéØ –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–µ–∑—é–º–µ")
async def general_resume_review(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} {message.from_user.username} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–µ–∑—é–º–µ")
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
        resize_keyboard=True
    )
    await message.answer(
        text="üìå –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏—à–ª–∏—Ç–µ —Ä–µ–∑—é–º–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏",
        reply_markup=keyboard
    )
    await state.set_state(ResumeAnalysisStates.waiting_for_resume_total)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É —Ä–µ–∑—é–º–µ")

@router.message(F.document, ResumeAnalysisStates.waiting_for_resume_total)
async def handle_general_resume(message: Message, state: FSMContext):
    try:
        if not message.document.file_name.lower().endswith('.pdf'):
            await message.answer("‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF!")
            return

        logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {message.document.file_name}")
        await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–µ–∑—é–º–µ... –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 3-5 –º–∏–Ω—É—Ç")

        # –°–∫–∞—á–∏–≤–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
        file = await message.bot.download(message.document.file_id)
        pdf_bytes = file.read()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state
        extracted_text = extract_text_from_pdf(pdf_bytes)
        if not extracted_text:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π.")
            await state.clear()
            return
            
        await state.update_data(resume_text=extracted_text)
        await state.set_state(ResumeAnalysisStates.resume_text_stored)

        # –í—ã–∑—ã–≤–∞–µ–º hot_resume –¥–ª—è –æ–±—â–µ–π –æ—Ü–µ–Ω–∫–∏
        analysis_result = await generating_answer_without_vacancy(extracted_text)  
        formatted_result = clean_and_format(analysis_result)

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ª—É—á–∏–ª –∞–Ω–∞–ª–∏–∑ {formatted_result}")
        
        await message.answer(formatted_result, parse_mode="HTML")
        await message.answer(
            "‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ë—É–¥—É —Ä–∞–¥ –µ—Å–ª–∏ –≤—ã –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Ñ–∏–¥–±–µ–∫–æ–º –æ –º–æ–µ–π —Ä–∞–±–æ—Ç–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–ü–æ–º–æ—â—å'",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
                ],
                resize_keyboard=True
            )
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—é–º–µ: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
                ],
                resize_keyboard=True
            )
        )
        await state.clear()

@router.message(F.text, lambda message: message.text == "üî• –ü—Ä–æ–∂–∞—Ä–∫–∞ —Ä–µ–∑—é–º–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞–∫–∞–Ω—Å–∏–π")
async def start_resume_roast_from_existing(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} {message.from_user.username} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –ü—Ä–æ–∂–∞—Ä–∫–∞ —Ä–µ–∑—é–º–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞–∫–∞–Ω—Å–∏–π")
    await state.set_state(ResumeAnalysisStates.waiting_for_category)
    await message.answer(
        "üîç –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—é–º–µ:",
        reply_markup=get_roast_categories_keyboard()
    )

def get_roast_categories_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üî• –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"), KeyboardButton(text="üî• –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞")],
            [KeyboardButton(text="üî• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"), KeyboardButton(text="üî• ML/AI/DS")],
            [KeyboardButton(text="üî• –ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç")],
            [KeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True

    )

@router.message(F.text, lambda message: message.text[2:] in category_keywords.keys())
async def handle_roast_category(message: Message, state: FSMContext):
    """üî• –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–∂–∞—Ä–∫–∏"""
    category = message.text[2:]
    await state.update_data(roast_category=category)
    await state.set_state(ResumeAnalysisStates.waiting_for_subcategory)
    
    await message.answer(
        f"üî• –í—ã–±–µ—Ä–∏—Ç–µ <b>–û–î–ù–£</b> —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category}</b>:\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∏–∂–µ üëá",
        reply_markup=get_roast_subcategories_keyboard(category),
        parse_mode="HTML"
    )

def get_roast_subcategories_keyboard(category: str) -> ReplyKeyboardMarkup:
    """üî• –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø—Ä–æ–∂–∞—Ä–∫–∏"""
    builder = ReplyKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å emoji
    for subcategory in category_keywords[category]["subcategories"].keys():
        builder.add(KeyboardButton(text=f"üî• {subcategory}"))  
    
    builder.adjust(2)
    
    # –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–Ω–æ–ø–∫–∏ —Ç–æ–∂–µ —Å emoji
    builder.row(
        KeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    )
    
    return builder.as_markup(resize_keyboard=True)


hair_user = {}
@router.message(F.text, 
    ResumeAnalysisStates.waiting_for_subcategory,
    lambda message: any(
        message.text[2:] in subcats
        for cat in category_keywords.values()
        for subcats in cat["subcategories"].keys()
    )
)
async def handle_roast_subcategory_selection(message: Message, state: FSMContext):
    """üî• –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    hair_user[message.from_user.id] = message.text[2:] 
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
        resize_keyboard=True
    )
    await message.answer(
        text="üìå –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏—à–ª–∏—Ç–µ —Ä–µ–∑—é–º–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏",
        reply_markup=keyboard
    )
    await state.set_state(ResumeAnalysisStates.waiting_for_resume_fair)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} {message.from_user.username} –Ω–∞—á–∞–ª –ø—Ä–æ–∂–∞—Ä–∫—É —Ä–µ–∑—é–º–µ")

@router.message(F.document, ResumeAnalysisStates.waiting_for_resume_fair)
async def handle_general_resume(message: Message, state: FSMContext, bot):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
        resize_keyboard=True
    )
    try:
        if not message.document.file_name.lower().endswith('.pdf'):
            await message.answer("‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF!",
                reply_markup=keyboard)
            return

        logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {message.document.file_name}")
        await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–µ–∑—é–º–µ... –ú–Ω–µ –Ω—É–∂–Ω–æ 3-5 –º–∏–Ω—É—Ç")

        # –°–∫–∞—á–∏–≤–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
        file = await message.bot.download(message.document.file_id)
        pdf_bytes = file.read()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state
        extracted_text = extract_text_from_pdf(pdf_bytes)

        analysis_result = await hot_resume(extracted_text, hair_user[message.from_user.id])
        # analysis_result = asyncio.create_task(hot_resume(extracted_text, hair_user[message.from_user.id]))
        formatted_result = clean_and_format(analysis_result)
        
        await message.answer(
            formatted_result,
            parse_mode="HTML",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.info(f"–û—à–∏–±–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id} {message.from_user.username} –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–µ–∑—é–º–µ {e}")
        await message.answer(
            '–û—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è —Å –æ—à–∏–±–∫–æ–π –∏ –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –µ–µ —É—Å—Ç—Ä–∞–Ω–∏—Ç—å',
            parse_mode="HTML",
            reply_markup=keyboard)
   
    


@router.message(F.text == "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é")
async def handle_vacancy_search(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} {message.from_user.username} –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é")
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
        resize_keyboard=True
    )
    
    await message.answer(
    "üåø <b>–î–æ–±—Ä—ã–π –¥–µ–Ω—å!</b>\n\n"
    "–ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã —Ä–µ—à–∏–ª–∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ!\n\n"
    "üìù <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:</b>\n\n"
    "‚Ä¢ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏\n"
    "‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏\n"
    "‚Ä¢ –ö–æ–º–ø–∞–Ω–∏—è\n"
    "‚Ä¢ –¢—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏\n"
    "‚Ä¢ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã\n"
    "‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –∑–∞—Ä–ø–ª–∞—Ç—ã (–ø–æ –∂–µ–ª–∞–Ω–∏—é)\n"
    "‚Ä¢ –õ–æ–∫–∞—Ü–∏—è/—É–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞\n"
    "‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å)\n\n"
    "üíº –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à—É –∑–∞—è–≤–∫—É –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è "
    "–¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏.\n\n"
    "<i>–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ!</i>",
    parse_mode="HTML",
    reply_markup=keyboard
)


    await state.set_state(Form.waiting_for_description)

@router.message(Form.waiting_for_description)
async def process_vacancy_description(message: Message, state: FSMContext):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_keyboard)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ FSM storage)
    await state.update_data(vacancy_description=message.text)

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} {message.from_user.username} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è
    await message.reply(
        "‚úÖ <b>–í–∞–∫–∞–Ω—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∞!</b>\n\n"
        "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!",
        parse_mode="HTML",
        reply_markup=main_keyboard  # –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü. –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É
    await forward_to_manager(message)
    
    await state.clear()

    
@router.message(Command("forward_vacancy"))  # –ú–æ–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ –¥—Ä—É–≥–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É
async def forward_to_manager(message: Message):
    MANAGER_CHAT_ID = -4959512272  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID —á–∞—Ç–∞/–≥—Ä—É–ø–ø—ã
    
    try:
        # 1. –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        forwarded_msg = await message.forward(
            chat_id=MANAGER_CHAT_ID
        )
        
        # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω—è—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–µ –∫ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–º—É)
        await message.bot.send_message(
            chat_id=MANAGER_CHAT_ID,
            text=f"üöÄ –ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –æ—Ç @{message.from_user.username}",
            reply_to_message_id=forwarded_msg.message_id  # –û—Ç–≤–µ—Ç –∏–º–µ–Ω–Ω–æ –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        )
        
        # 3. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.reply("‚úÖ –í–∞–∫–∞–Ω—Å–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É!")
        logger.info(f"–í–∞–∫–∞–Ω—Å–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –Ω–∞—à —á–∞—Ç")
        
    except Exception as e:
        logger.info(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
 

@router.message(F.text == "–ü–æ–º–æ—â—å")
async def handle_trable(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} {message.from_user.username} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –ü–æ–º–æ—â—å")
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
        resize_keyboard=True
    )
    
    await message.answer(
    "üõé <b>–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n"
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —Å –∫–∞–∫–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å?\n"
        "–û–ø–∏—à–∏—Ç–µ –µ—ë –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–∂–µ–º!\n\n",
    parse_mode="HTML",
    reply_markup=keyboard
    )


    await state.set_state(Form.waiting_for_trable)

@router.message(Form.waiting_for_trable)
async def process_vacancy_description(message: Message, state: FSMContext):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç–º–µ–Ω–µ–Ω)", reply_markup=main_keyboard)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ FSM storage)
    await state.update_data(trable=message.text)
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è
    await message.reply(
        "üíå <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!</b>\n\n"
        "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n"
        "–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n",
        parse_mode="HTML",
        reply_markup=main_keyboard  # –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü. –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )

    await forward_to_manager_trable(message)
    
    await state.clear()

@router.message(Command("forward_to_manager_trable"))  # –ú–æ–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ –¥—Ä—É–≥–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É
async def forward_to_manager_trable(message: Message):
    MANAGER_CHAT_ID = -4959512272  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID —á–∞—Ç–∞/–≥—Ä—É–ø–ø—ã
    
    try:
        # 1. –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        forwarded_msg = await message.forward(
            chat_id=MANAGER_CHAT_ID
        )
        
            
           
        # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω—è—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–µ –∫ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–º—É)
        await message.bot.send_message(
            chat_id=MANAGER_CHAT_ID,
            text= (f"üÜò <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</b>\n\n"
                 f"üöÄ –ü—Ä–æ–±–ª–µ–º–∞ —É @{message.from_user.username}"
                 f"üÜî <b>ID:</b> {message.from_user.id}\n"
                f"üìÖ <b>–í—Ä–µ–º—è:</b> {message.date.strftime('%d.%m %H:%M')}\n\n"
             # –û—Ç–≤–µ—Ç –∏–º–µ–Ω–Ω–æ –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            ),
            parse_mode="HTML",
            reply_to_message_id=forwarded_msg.message_id 
        )
        logger.info(f"–ü—Ä–æ–±–ª–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –Ω–∞—à —á–∞—Ç")
        # 3. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.reply("‚úÖ –í–∞—à–∞ –ø—Ä–æ–±–ª–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É!")
        
    except Exception as e:
        logger.info(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {e}")
        await message.answer("–£–ø—Å... —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.")
 




# –ë–¥ –Ω–∏–∂–µ

async def hourly_db_update(bot: Bot):
    """–ï–∂–µ—á–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î"""
    global vacanciessss
    global hr_vacanciess
    while True:
        logger.info(f"[{datetime.now()}] –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î...")

        vacanciessss, hr_vacanciess = await load_and_cache_vacancies()
        logger.info(f"[{datetime.now()}] –í–∞–∫–∞–Ω—Å–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        await send_personalized_vacancies(bot)  
        logger.info(f"[{datetime.now()}] –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        await asyncio.sleep(3600)  # 1 —á–∞—Å
    

async def hourly_db_save(bot: Bot):
    """–ï–∂–µ—á–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î"""
    global vacanciessss
    global hr_vacanciess
    while True:
        logger.info(f"[{datetime.now()}] –ó–∞–ø—É—Å–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ë–î...")
        await save_selected_subcategories()
        logger.info(f"[{datetime.now()}] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        await asyncio.sleep(3600)  # 1 —á–∞—Å
        

async def start_background_tasks(bot: Bot):
    """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
    global selected_subcategories
    global selected_cities
    global all_cities
    global user_expierence

    loaded_data, all_cities, selected_cities, user_expierence = await load_selected_subcategories()
    # vacanciessss = await load_and_cache_vacancxies()
    selected_subcategories.update(loaded_data)
    logger.info(f"[{datetime.now()}] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(loaded_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –≤—ã–±–æ—Ä–æ–≤ –∏–∑ –ë–î")
    asyncio.create_task(hourly_db_update(bot))
    asyncio.create_task(hourly_db_save(bot))
    asyncio.create_task(cleanup_memory(bot))


async def cleanup_memory(bot: Bot):
    """–†–∞–∑ –≤ 2 –¥–Ω—è —á–∏—Å—Ç–∏–º –∫–µ—à"""
    global last_send_time, send_vacancies
    while True:
        await asyncio.sleep(172800) 
        logger.info(f"[{datetime.now()}] –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ last_send_time, send_vacancies")
        try:
            now = datetime.now()
            last_send_time = {k: v for k, v in last_send_time.items() if now - v < timedelta(days=3)}
            send_vacancies = {k: v for k, v in send_vacancies.items() if now - v[-1]['date'] < timedelta(days=3)}
        except Exception as e:
            logger.info(f"[{datetime.now()}] Cleanup error: {e}")
   


async def save_selected_subcategories():
    if not selected_subcategories:
        return
    
    conn = None
    try:
        conn = await asyncpg.connect(
            host= host,
            port=port,
            database=database,
            user=user,
            password=password
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏–∏ —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        users_to_update = selected_subcategories.copy()
        cities_to_update = selected_cities.copy()
        exp_to_update = user_expierence.copy()

        async with conn.transaction():
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            for user_id, subcategories in users_to_update.items():
                await conn.execute(
                    "UPDATE users SET new_category = $1 WHERE user_id = $2",
                    json.dumps(list(subcategories), ensure_ascii=False),
                    str(user_id)
                )

            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ—Ä–æ–¥–∞
            for user_id, cities in cities_to_update.items():
                await conn.execute(
                    "UPDATE users SET cities = $1 WHERE user_id = $2",
                    json.dumps(list(cities), ensure_ascii=False),
                    str(user_id)
                )

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—ã—Ç
            for user_id, exp in exp_to_update.items():
                await conn.execute(
                    "UPDATE users SET experience = $1 WHERE user_id = $2",
                    json.dumps(list(exp), ensure_ascii=False),
                    str(user_id)
                )
        
        logger.info(f"[{datetime.now()}] –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(users_to_update)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    
    except ValueError as e:  # –ó–∞–º–µ–Ω–∏–ª–∏ json.JSONEncodeError
        logger.info(f"[{datetime.now()}] –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
    except asyncpg.PostgresError as e:
        logger.info(f"[{datetime.now()}] –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:  {e}")
    except Exception as e:
        logger.info(f"[{datetime.now()}] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:  {e}")
    finally:
        if conn:
            await conn.close()



# –ü—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
async def load_selected_subcategories() -> dict:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ {user_id: set(subcategories)}
    """
    conn = None
    try:
        conn = await asyncpg.connect(
            host=host,
            port=port,
            database=database,
            user=user,
            password=password
        )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
        records = await conn.fetch(
            "SELECT user_id, new_category FROM users WHERE new_category IS NOT NULL"
        )
        city_list = await conn.fetch(
            "SELECT distinct location FROM vacans"
        )


        city_list = [record['location'] for record in city_list]
        city_list = [city for city in city_list if city is not None]

        city_for_users = await conn.fetch(
            "SELECT user_id, cities FROM users WHERE cities IS NOT NULL"
        )

        expierence_for_users = await conn.fetch(
            "SELECT user_id, experience FROM users WHERE experience IS NOT NULL"
        )


        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å selected_subcategories
        loaded_data = {}
        for record in records:
            try:
                if record['new_category']:
                    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ set
                    loaded_data[record['user_id']] = set(json.loads(record['new_category']))
            except json.JSONDecodeError as e:
                logger.info(f"[{datetime.now()}] –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è user_id {record['user_id']}: {e}")
                continue
        logger.info(f"[{datetime.now()}] –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {len(loaded_data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –ë–î")

        loaded_data_city = {}
        for record in city_for_users:
            try:
                if record['cities']:
                    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ set
                    loaded_data_city[record['user_id']] = set(json.loads(record['cities']))
            except json.JSONDecodeError as e:
                logger.info(f"[{datetime.now()}] –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è user_id {record['user_id']}: {e}")
                continue
        logger.info(f"[{datetime.now()}] –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≥–æ—Ä–æ–¥–æ–≤ {len(loaded_data_city)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –ë–î")
        user_expierence = {}
        for record in expierence_for_users:
            try:
                if record['experience']:
                    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ set
                    user_expierence[record['user_id']] = set(json.loads(record['experience']))
                    # user_expierence[record['user_id']] = set((record['experience']))
                    # user_expierence[record['user_id']] = record['experience']
            except:
                logger.info(f"[{datetime.now()}] –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è user_id {record['user_id']}: {e}")
                continue
        logger.info(f"[{datetime.now()}] –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –æ–ø—ã—Ç–∞ {len(user_expierence)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –ë–î")    
        
        return loaded_data, city_list, loaded_data_city, user_expierence
        
    except Exception as e:
        logger.info(f"[{datetime.now()}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑ –ë–î: {e}") 
        return {}
    finally:
        if conn:
            await conn.close()



# –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π

async def load_and_cache_vacancies():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ –∏ HR-–≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ –ë–î,
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (vacancies_cache, hr_vacancies_cache)
    """
    conn = None
    logger.info(f"[{datetime.now()}] –ù–∞—á–∞–ª–∏ –∫–µ—à–∏—Ä–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏") 
    try:
        conn = await asyncpg.connect(
            host=host,
            port=port,
            database=database,
            user=user,
            password=password
        )
        
        # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ã—á–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
        records = await conn.fetch(
            "SELECT id, title, company, skills, location, experience, new_category, date, link "
            "FROM vacans WHERE date >= CURRENT_DATE - INTERVAL '3 day' AND (is_hr != TRUE or is_hr is Null)" 
        )
        
        # –ö—ç—à–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
        vacancies = {
            str(record['id']): {
                'title': record['title'],
                'company': record['company'],
                'skills': record['skills'],
                'location': record['location'],
                'experience': record['experience'],
                'categories': record['new_category'].split("|")[1],
                'date': record['date'],
                'link': record['link'],
                'is_hr': False
            }
            for record in records
        }
        
        # 2. –ó–∞–≥—Ä—É–∑–∫–∞ HR-–≤–∞–∫–∞–Ω—Å–∏–π
        hr_records = await conn.fetch(
            "SELECT id, title, company, skills, location, description, date, link, contact, experience, new_category "
            "FROM vacans WHERE date >= CURRENT_DATE - INTERVAL '3 day' AND is_hr = TRUE"
        )
        
        # –ö—ç—à–∏—Ä—É–µ–º HR-–≤–∞–∫–∞–Ω—Å–∏–∏
        hr_vacancies = {
            str(record['id']): {
                'title': record['title'],
                'company': record['company'],
                'skills': record['skills'],
                'location': record['location'],
                'experience': record['experience'],
                'categories': record['new_category'].split("|")[1],
                'description': record['description'],
                'date': record['date'],
                'link': record['link'],
                'is_hr': True,
                'contact': record['contact']
            }
            for record in hr_records
        }
        logger.info(f"[{datetime.now()}] –í–∞–∫–∞–Ω—Å–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω—ã (–æ–±—ã—á–Ω—ã–µ: {len(vacancies)}, HR: {len(hr_vacancies)})") 
        return vacancies, hr_vacancies
        
    except Exception as e:
        logger.info(f"[{datetime.now()}] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}") 
        return {}, {}
    finally:
        if conn:
            await conn.close()



from datetime import datetime, timedelta



# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏
last_send_time = {}
send_vacancies = {}
vacancy_counter = {}


async def send_vacancies_to_user(bot: Bot, user_id: int, vacancies: list):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –≤–æ–∑–º–æ–∂–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
    for i, vac in enumerate(vacancies, 1):
        # message = [
        #     "üîî <b>–ù–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:</b>\n",
        #     f"‚ú® <b>{vac['title']}</b>\n",
        #     f"üèõ <i>{vac['company']}</i>\n\n",
        #     f"üåç <b>–õ–æ–∫–∞—Ü–∏—è:</b> {vac['location']}\n",
        #     f"üìÜ <b>–û–ø—ã—Ç:</b> {vac['experience']}\n",
        #     f"üíº <b>–ù–∞–≤—ã–∫–∏:</b> {vac['skills'][:200]} ...\n\n",
        #     f"üîó <a href='{vac['link']}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞–∫–∞–Ω—Å–∏–∏</a>\n"
            
        # ]
        message = (
            f"üè¢ <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {vac['title']}\n"
            f"üèõ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> <i>{vac['company']}</i>\n\n"
            
            "üìç <b>–õ–æ–∫–∞—Ü–∏—è:</b> {location}\n"
            "üìÖ <b>–¢—Ä–µ–±—É–µ–º—ã–π –æ–ø—ã—Ç:</b> {experience}\n\n"
            
            "üõ† <b>–ö–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏:</b>\n"
            "{skills}\n\n"
            
            "üîó <a href='{link}'>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é</a>\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
        ).format(
            location=vac.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            experience=vac.get('experience', '–ù–µ —É–∫–∞–∑–∞–Ω'),
            skills= vac['skills'][:300],
            link=vac['link']
        )
        
        await bot.send_message(
            chat_id=user_id,
            text="".join(message),
            parse_mode="HTML"
        )
        await asyncio.sleep(1.5)
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏ –∏ —ç—Ç–æ –∫–∞–∂–¥–∞—è 3-—è –≤–∞–∫–∞–Ω—Å–∏—è
        if i % 5 == 0:
            logger.info(f"[{datetime.now()}] ‚è≥ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ 5 –≤–∞–∫–∞–Ω—Å–∏–∏, –ø–∞—É–∑–∞ 10 –º–∏–Ω—É—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}..") 
            await asyncio.sleep(600)  # –ó–∞–¥–µ—Ä–∂–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

async def send_hr_vacancies_to_user(bot: Bot, user_id: int, vacancies: list):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HR-–≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –≤–æ–∑–º–æ–∂–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π"""

    for i, vac in enumerate(vacancies, 1):
        # message = [
        #     "üîî <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ HR-–≤–∞–∫–∞–Ω—Å–∏–∏:</b>\n",
        #     f"‚ú® <b>{vac['title']}</b>\n",
        #     f"üèõ <i>{vac['company']}</i>\n\n",
        #     f"üåç <b>–õ–æ–∫–∞—Ü–∏—è:</b> {vac['location']}\n",
        #     f"üíº <b>–ù–∞–≤—ã–∫–∏:</b> {vac['skills'][:150]}\n",
        #     f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {vac['description'][:500]} ...\n\n",
        #     f"üîó <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:</b> {vac['contact']}\n"
        # ]
        
        message = (
            "üåü <b>–ü—Ä—è–º–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –æ—Ç HR</b> üåü\n"
            "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
            f"üéØ <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {vac['title']}\n"
            f"üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {vac['company']}\n"
            f"üåé <b>–õ–æ–∫–∞—Ü–∏—è:</b> {vac.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
            
            "üîπ <b>–¢—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏:</b>\n"
            f"{(vac['skills'][:200])}\n\n"
            
            "üìå <b>–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:</b>\n"
            f"{vac['description'][:600]}\n\n"
            
            "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞:</b>\n"
            f"   {vac['contact']}\n"

        )
        
        await bot.send_message(
            chat_id=user_id,
            text="".join(message),
            parse_mode="HTML"
        )
        await asyncio.sleep(1)

        print('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ hr –≤–∞–∫–∞–Ω—Å–∏—è')
        
        if i % 3 == 0:
            logger.info(f"[{datetime.now()}] ‚è≥ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ 3 HR-–≤–∞–∫–∞–Ω—Å–∏–∏, –ø–∞—É–∑–∞ 10 –º–∏–Ω—É—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}..") 
            await asyncio.sleep(600)




async def send_personalized_vacancies(bot: Bot):
    """–†–∞—Å—Å—ã–ª–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏, –ø–æ—è–≤–∏–≤—à–∏–µ—Å—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    global vacancy_counter
    logger.info(f"[{datetime.now()}] –ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π") 

    try:
        current_time = datetime.now()
        
        # 1. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–≤–µ–∂–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π
        fresh_vacancies = {}
        fresh_hr_vacancies = {}

        for vid, v in vacanciessss.items():
            try:
                try:
                    vacancy_date = datetime.strptime(str(v['date']), '%Y-%m-%d %H:%M:%S.%f')
                except ValueError:
                    vacancy_date = datetime.strptime(str(v['date']), '%Y-%m-%d %H:%M:%S')
                
                if vacancy_date >= current_time - timedelta(hours=24):
                    fresh_vacancies[vid] = v
            except Exception as e:
                logger.info(f"[{datetime.now()}] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ {vid}: {e}") 
                continue


        for vid, v in hr_vacanciess.items():
            try:
                try:
                    vacancy_date = datetime.strptime(str(v['date']), '%Y-%m-%d %H:%M:%S.%f')
                except ValueError:
                    vacancy_date = datetime.strptime(str(v['date']), '%Y-%m-%d %H:%M:%S')
                
                if vacancy_date >= current_time - timedelta(hours=24):
                    fresh_hr_vacancies[vid] = v
            except Exception as e:
                logger.info(f"[{datetime.now()}] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ {vid}: {e}") 
                continue
        
        

        if not fresh_vacancies and not fresh_hr_vacancies:
            logger.info(f"[{datetime.now()}]  –ù–µ—Ç –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏") 
            return
            
        # 2. –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        tasks = []
        for user_id, user_categories in selected_subcategories.items():
            user_cities = selected_cities.get(user_id, set())
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # matched_vacancies = [
            # v for v in fresh_vacancies.values()
            # if (v.get('location') is not None and  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ location –Ω–µ None
            #     v['location'] in user_cities and
            #     any(cat in v['categories'] for cat in user_categories) and
            #     (v.get('experience') == user_expierence.get(user_id) or v.get('experience') == '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
            # ]

            matched_vacancies = [
                v for v in fresh_vacancies.values()
                if (v.get('location') is not None and
                v['location'] in user_cities and
                any(cat in v['categories'] for cat in user_categories) and
                (v.get('experience') in user_expierence.get(user_id, set()) or 
                v.get('experience') == '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
                ]

            matched_hr_vacancies = [
                v for v in fresh_hr_vacancies.values()
                if (v.get('location') is not None and  
                v['location'] in user_cities and
                any(cat in v['categories'] for cat in user_categories) and
                (v.get('experience') or user_expierence.get(user_id, set()) or v.get('experience') == '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
            ]
            

            # –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ
            previously_sent_links = {vac['link'] for vac in send_vacancies.get(user_id, [])}
            new_matched_vacancies = [vac for vac in matched_vacancies if vac['link'] not in previously_sent_links]

            new_matched_hr_vacancies = [vac for vac in matched_hr_vacancies if vac['link'] not in previously_sent_links]

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏—è—Ö
            
            if user_id in last_send_time:
                time_since_last_send = current_time - last_send_time[user_id]
                if time_since_last_send < timedelta(minutes=10):
                    logger.info(f"[{datetime.now()}] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {user_id} - –Ω–µ –ø—Ä–æ—à–ª–æ 10 –º–∏–Ω—É—Ç") 
                    continue
            

            if new_matched_hr_vacancies:
                task = asyncio.create_task(
                     send_hr_vacancies_to_user(bot, user_id, new_matched_hr_vacancies))
                tasks.append(task)

            if new_matched_vacancies:
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –æ—Ç–ø—Ä–∞–≤–∫–∏
                task = asyncio.create_task(
                    send_vacancies_to_user(bot, user_id, new_matched_vacancies)
                    )
                tasks.append(task)
                    
            

            if new_matched_vacancies or new_matched_hr_vacancies:
                if user_id not in send_vacancies:
                    send_vacancies[user_id] = []
                send_vacancies[user_id].extend(new_matched_vacancies + new_matched_hr_vacancies)
                last_send_time[user_id] = current_time

                
        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        await asyncio.gather(*tasks)
        
    except Exception as e:
        logger.info(f"[{datetime.now()}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}") 



import asyncpg

async def load_vacancies_for_analysis(vacancy_category):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –≤—ã–±–æ—Ä–∫–∏ –∏–∑ –ë–î,
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (vacancies_cache, user_selections)
    """
    conn = None
    try:
        conn = await asyncpg.connect(
            host=host,
            port=port,
            database=database,
            user=user,
            password=password
        )
        
        # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π
        records = await conn.fetch(
            f"SELECT title, salary, skills, location, experience, link FROM vacans WHERE new_category like '%{vacancy_category}' and date >= CURRENT_DATE - INTERVAL '3 day'"
        )
        logger.info(f"[{datetime.now()}] –°–∫–∞—á–∞–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ü—Ä–æ–∂–∞—Ä–∫–∏ —Ä–µ–∑—é–º–µ") 
        return records
        
    except Exception as e:
        logger.info(f"[{datetime.now()}] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}") 
        return {}, {}
    finally:
        if conn:
            await conn.close()


async def hot_resume(pdf_text, vacancy_category,  temp = 0.8):
    logger.info(f"[{datetime.now()}] –ó–∞—à–ª–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é hot_resume") 
    
    vacancies = await load_vacancies_for_analysis(vacancy_category)
    logger.info(f"[{datetime.now()}] –ü–µ—Ä–µ—à–ª–∏ –∫ –ø—Ä–æ–º—Ç—É") 
    prompt = f"""
        –¢—ã ‚Äî HR-—ç–∫—Å–ø–µ—Ä—Ç —Å 10+ –ª–µ—Ç –æ–ø—ã—Ç–∞ –≤ IT-—Ä–µ–∫—Ä—É—Ç–∏–Ω–≥–µ. 
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∑—é–º–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {vacancy_category} –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–≤–µ–ª–∏—á–∞—Ç —à–∞–Ω—Å—ã –Ω–∞ –æ—Ç–∫–ª–∏–∫ –Ω–∞ 50%. 

        **–ñ–µ—Å—Ç–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞:**
        1. –¢–æ–ª—å–∫–æ —Ñ–∞–∫—Ç—ã –∏–∑ —Ä–µ–∑—é–º–µ (–Ω–µ –¥–æ–¥—É–º—ã–≤–∞–π)
        2. –°—Ä–∞–≤–Ω–∏–≤–∞–π —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ {vacancies[:25]}
        3. –ü–∏—à–∏ –∫–∞–∫ –ª–∏—á–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç (–±–µ–∑ —à–∞–±–ª–æ–Ω–æ–≤)
        4. –ú–∞–∫—Å. 2500 —Å–∏–º–≤–æ–ª–æ–≤
        5. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∫—É—Ä—Å–∏–≤, –∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ–≥–∏ <b> –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.

        **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ (Telegram-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ):**
        üéØ <b>–ì–ª–∞–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞</b>: 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        üìä <b>–ß–∏—Å–ª–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π</b>: "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é –±—ã–ª–æ X –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é –≤–∞–∫–∞–Ω—Å–∏–π"
        üíº <b>–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–æ–ª–∏</b>: 3 –ø—É–Ω–∫—Ç–∞ (—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ/–Ω–µ—Ö–≤–∞—Ç–∫–∞)
        üí∞ <b>–ó–∞—Ä–ø–ª–∞—Ç–Ω—ã–π –ø–æ—Ç–æ–ª–æ–∫</b>: "–ë–µ–∑ –¥–æ—Ä–∞–±–æ—Ç–æ–∫: X ‚ÇΩ | –° –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏: Y ‚ÇΩ". –ï—Å–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–π –º–µ–Ω—å—à–µ 5, —Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç.
        üõ† <b>–¢–û–ü-3 –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b> (–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã):
        1. –ó–∞–º–µ–Ω–∏—Ç—å "—Ñ—Ä–∞–∑–∞ –∏–∑ —Ä–µ–∑—é–º–µ" ‚Üí "–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"
        2. –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤—ã–∫ "—Å–∞–º—ã–π —á–∞—Å—Ç—ã–π skill –∏–∑ –≤–∞–∫–∞–Ω—Å–∏–π"
        3. –£–¥–∞–ª–∏—Ç—å "–Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –ø—É–Ω–∫—Ç"
        üìà <b>–ë—ã—Å—Ç—Ä—ã–π —á–µ–∫</b>: "–ü–æ—Å–ª–µ –ø—Ä–∞–≤–æ–∫ +% –æ—Ç–∫–ª–∏–∫–æ–≤"
        üîó <b>–†–µ—Å—É—Ä—Å—ã</b>: –°–æ–≤–µ—Ç —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã—É—á–∏—Ç—å
        4. –ù–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é: —Å—Å—ã–ª–∫–∏ —Ç–æ–ª—å–∫–æ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤ –≤–∞–∫–∞–Ω—Å–∏–π, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –ø—Ä–∏—Å–ª–∞–ª–∏.

        –†–µ–∑—é–º–µ:
        {pdf_text}
        """

    loop = asyncio.get_event_loop()
    completion = await loop.run_in_executor(
        None,
        lambda: client.chat.completions.create(
            extra_headers={
            "HTTP-Referer": "<YOUR_SITE_URL>",  # Optional
            "X-Title": "<YOUR_SITE_NAME>",      # Optional
            },
            model="deepseek/deepseek-r1-0528:free",
            messages=[{"role": "user", "content": prompt}],
            temperature=temp
        )
    )
    text = completion.choices[0].message.content
    logger.info(f"[{datetime.now()}] –ü–æ–ª—É—á–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è {text}") 

    return text
